#! /usr/bin/env python

import sys,os
import numpy as np
import xml.etree.ElementTree as ET

from ..config import *










class dustAtlas(object):
    
    def __init__(self,verbose=False):
        
        classname = self.__class__.__name__
        funcname = self.__class__.__name__+"."+sys._getframe().f_code.co_name
        # Set verbosity
        self.verbose = verbose
        
        # Load dust atlas file
        self.dustFile = galacticusPath + "data/dust/atlasFerrara2000/attenuations_MilkyWay_dustHeightRatio1.0.xml"
        if not os.path.exists(self.dustFile):
            raise IOError(classname+"(): cannot find Ferrara et al. (2000) dust atlas file!")
        else:
            if self.verbose:
                print(classname+"(): loading Ferrara et al. (2000) dust atlas file...")
        self.dustData = ET.parse(self.dustFile)
        # Construct map of XML parents/descendents
        self.dustRoot = self.dustData.getroot()
        self.dustMap = {c.tag:p for p in self.dustRoot.iter() for c in p}        
        # Load wavelengths
        if self.verbose:
            print(classname+"(): extracting wavelengths...")
        self.wavelengths = np.copy([ float(lam.text) for lam in self.dustMap["wavelengths"].iter("lambda")])
        

        # Load attenuations for components
        atten = self.dustMap["attenuations"]
        for att in atten.iter("components"):
            print att



        components = self.dustMap["components"]
        for comp in components:
            print comp.find("name").text




        inclinationsCount = len([ inc for inc in components.iter("inclination")])
        
        #print len(components.iter("inclination"))
        #for inc in components.iter("inclination"):
        #    print inc
        
        
        

        
        

